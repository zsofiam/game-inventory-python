import unittest
import csv
import sys
from io import StringIO
from game_inventory import display_inventory, add_to_inventory, remove_from_inventory, print_table, import_inventory, export_inventory


# DO NOT EDIT THIS FILE!
# This file contains tests to check if your code is working correctly.
# Run this file to check whether you have a good solution!
# (note: passing all tests does not mean that your code is correct)
class GameInventoryTests(unittest.TestCase):

    def test_display_inventory(self):
        _inventory = {'rope': 1, 'torch': 6}
        expected_output = \
"""rope: 1
torch: 6"""
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            display_inventory(_inventory)
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout

    def test_print_table(self):
        _inventory = {'rope': 1, 'torch': 6}
        expected_output = \
"""-----------------
item name | count
-----------------
     rope |     1
    torch |     6
-----------------"""
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            print_table(_inventory)
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout

    def test_print_table_count_asc(self):
        _inventory = {'rope': 1, 'torch': 6, 'blanket': 3}
        expected_output = \
"""-----------------
item name | count
-----------------
     rope |     1
  blanket |     3
    torch |     6
-----------------"""
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            print_table(_inventory, "count,asc")
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout

    def test_print_table_count_desc(self):
        _inventory = {'rope': 1, 'torch': 6, 'blanket': 3}
        expected_output = \
"""-----------------
item name | count
-----------------
    torch |     6
  blanket |     3
     rope |     1
-----------------"""
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            print_table(_inventory, "count,desc")
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout

    def test_add_single_item(self):
        _inventory = {'rope': 1, 'torch': 6}
        added_items = ['torch']
        add_to_inventory(_inventory, added_items)

        self.assertDictEqual(_inventory, {'rope': 1, 'torch': 7})

    def test_add_multiple_items(self):
        _inventory = {'rope': 1, 'torch': 6}
        added_items = ['torch', 'torch', 'torch']
        add_to_inventory(_inventory, added_items)

        self.assertDictEqual(_inventory, {'rope': 1, 'torch': 9})

    def test_remove_single_item(self):
        _inventory = {'rope': 1, 'torch': 6}
        removed_items = ['rope']
        remove_from_inventory(_inventory, removed_items)

        self.assertDictEqual(_inventory, {'torch': 6})

    def test_remove_multiple_items(self):
        _inventory = {'rope': 1, 'torch': 6}
        removed_items = ['torch', 'torch', 'torch']
        remove_from_inventory(_inventory, removed_items)

        self.assertDictEqual(_inventory, {'rope': 1, 'torch': 3})

    def test_import_inventory(self):
        _inventory = {'rope': 1, 'torch': 6}
        import_inventory(_inventory, "test_inventory.csv")

        self.assertDictEqual(_inventory, {
            'rope': 1,
            'torch': 6,
            'battleaxe': 1,
            'dagger': 3,
            'gold coin': 1
        })

    def test_import_inventory_catches_filenotfounderror(self):
        _inventory = {'rope': 1, 'torch': 6}
        expected_output = "File 'no_such_file.csv' not found!"
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            import_inventory(_inventory, "no_such_file.csv")
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout

    def test_export_inventory(self):
        export_inventory({'dagger': 3, 'gold coin': 1, "battleaxe": 1},
                         "test_inventory_export.csv")

        with open("test_inventory_export.csv", newline='') as csvfile:
            expected = ["dagger", "gold coin", "battleaxe", "dagger", "dagger"]
            expected.sort()
            reader = csv.reader(csvfile, delimiter=',', quotechar='|')
            for row in reader:
                row.sort()
                self.assertListEqual(expected, row)

    def test_export_inventory_catches_permissionerror(self):
        _inventory = {'rope': 1, 'torch': 6}
        expected_output = "You don't have permission creating file '/nopermission.csv'!"
        saved_stdout = sys.stdout

        try:
            mocked_stdout = StringIO()
            sys.stdout = mocked_stdout
            export_inventory(_inventory, "/nopermission.csv")
            self.assertEqual(mocked_stdout.getvalue().strip(), expected_output)
        finally:
            sys.stdout = saved_stdout


def main():
    unittest.main()


if __name__ == '__main__':
    main()
